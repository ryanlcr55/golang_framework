// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/respositories/post.go

// Package mock_respositories is a generated GoMock package.
package mock_respositories

import (
	context "context"
	entities "go_framework/internal/app/entities"
	respositories "go_framework/internal/app/respositories"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPostRepo is a mock of IPostRepo interface.
type MockIPostRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIPostRepoMockRecorder
}

// MockIPostRepoMockRecorder is the mock recorder for MockIPostRepo.
type MockIPostRepoMockRecorder struct {
	mock *MockIPostRepo
}

// NewMockIPostRepo creates a new mock instance.
func NewMockIPostRepo(ctrl *gomock.Controller) *MockIPostRepo {
	mock := &MockIPostRepo{ctrl: ctrl}
	mock.recorder = &MockIPostRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPostRepo) EXPECT() *MockIPostRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIPostRepo) Create(ctx context.Context, post *entities.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIPostRepoMockRecorder) Create(ctx, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPostRepo)(nil).Create), ctx, post)
}

// FindByNo mocks base method.
func (m *MockIPostRepo) FindByNo(ctx context.Context, no string) (entities.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNo", ctx, no)
	ret0, _ := ret[0].(entities.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNo indicates an expected call of FindByNo.
func (mr *MockIPostRepoMockRecorder) FindByNo(ctx, no interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNo", reflect.TypeOf((*MockIPostRepo)(nil).FindByNo), ctx, no)
}

// WithTransaction mocks base method.
func (m *MockIPostRepo) WithTransaction(tx any) (respositories.IPostRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", tx)
	ret0, _ := ret[0].(respositories.IPostRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockIPostRepoMockRecorder) WithTransaction(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockIPostRepo)(nil).WithTransaction), tx)
}
